#!/bin/bash
#
# Dart Version Manager
# author: Chris Bracken <chris@bracken.jp>

DVM_ROOT="$HOME/.dvm"
DL_URI="https://storage.googleapis.com/dart-archive/channels/stable/release"

_dvm_usage() {
  echo "usage: dvm <command> [<args>]"
  echo ""
  echo "Commands:"
  echo "   install    Install a Dart version"
  echo "   list       List installed Dart versions"
  echo "   use        Select a Dart version to use"
  return 1
}

_dvm_create_dirs() {
  mkdir -p "$DVM_ROOT/darts" > /dev/null 2>&1
  mkdir -p "$DVM_ROOT/environments" > /dev/null 2>&1
}

dvm_use() {
  if [[ $# < 1 ]]; then
    echo "usage: dvm use <version> [--default]"
    return 1
  fi

  local version=$1
  local default=$2
  shift

  if [[ "$default" == "--default" ]]; then
    local defaults="$DVM_ROOT/environments/default"
    echo 'export DVM_ROOT; DVM_ROOT="$DVM_ROOT"' > "$defaults"
    echo "PATH=\"\$DVM_ROOT/darts/$version/bin:\$PATH\"" >> "$defaults"
  fi

  if [[ ! -d "$DVM_ROOT/darts/$version" ]]; then
    echo "ERROR: version not found. Try 'dvm install $version'"
    return 1
  fi
  PATH="$DVM_ROOT/darts/$version/bin:$PATH"
}

dvm_list() {
  for v in $(find "$DVM_ROOT/darts" -maxdepth 1 ! -path "$DVM_ROOT/darts" -type d); do
    echo $(basename $v)
  done
}

dvm_install() {
  if [[ $# < 1 ]]; then
    echo "usage: dvm install <version>"
    return 1
  fi

  curl=$(which curl)
  if [[ ! -x "$curl" ]]; then
    echo "ERROR: curl is required but was not found on PATH."
    return 1
  fi

  local version=$1
  shift 
  
  # Create tmp workspace.
  tmpdir=$(mktemp -d)
  pushd $tmpdir > /dev/null

  # Download SDK.
  local base_uri="$DL_URI/$version"
  curl -O "$base_uri/sdk/dartsdk-linux-x64-release.zip"
  unzip dartsdk-linux-x64-release.zip
  version=$(<dart-sdk/version)

  # Move SDK under $DVM_ROOT/darts.
  _create_darts_dir
  if [[ ! -d "$DVM_ROOT/darts/$version" ]]; then
    mv dart-sdk "$DVM_ROOT/darts/$version"
  fi

  # Download Dartium.
  curl -O "$base_uri/dartium/dartium-linux-x64-release.zip"
  unzip dartium-linux-x64-release.zip
  if [[ ! -d "$DVM_ROOT/darts/$version/dartium" ]]; then
    local dartium_dir="$(find . -maxdepth 1 ! -path . -type d)"
    mv "$dartium_dir" "$DVM_ROOT/darts/$version/dartium"
  fi

  # Create Dartium symlink.
  pushd "$DVM_ROOT/darts/$version/bin" > /dev/null
  ln -s ../dartium/chrome dartium
  popd > /dev/null

  # Clean up.
  popd > /dev/null
  rm -rf $tmpdir
}

dvm() {
  if [[ -z "$DVM_ROOT" ]]; then
    echo "ERROR: DVM_ROOT not set. Please source \$DVM_ROOT/scripts/dvm."
    return 1
  fi
  if [[ ! -d "$DVM_ROOT" ]]; then
    echo "ERROR: DVM_ROOT does not exist. Please reinstall DVM."
    return 1
  fi
  _dvm_create_dirs

  if [[ $# < 1 ]]; then
    _dvm_usage
    return 1
  fi
  cmd=$1
  shift
  if [[ "$cmd" == "use" ]]; then
    dvm_use "$@"
  elif [[ "$cmd" == "list" ]]; then
    dvm_list "$@"
  elif [[ "$cmd" == "install" ]]; then
    dvm_install "$@"
  else
    _dvm_usage
  fi
}

if [[ -e "$DVM_ROOT/environments/default" ]]; then
  . "$DVM_ROOT/environments/default"
fi
